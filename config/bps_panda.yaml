# PANDA plugin specific settings:
wmsServiceClass: lsst.ctrl.bps.panda.PanDAService
placeholderParams: ['qgraphNodeId', 'qgraphId']
defaultPreCmdOpts: "--long-log --log-level=VERBOSE --log-file payload-log.json --log-label REPO={butlerConfig}"

# Limit the number of jobs in a single PanDA task
maxJobsPerTask: 30000


# Job values which sites need to define for runnerCommand:
# custom_lsst_setup - user defined special environments
# setupLSSTEnv - how to get lsst_distrib set up
# jobLogDir - where prmon and other non-payload logs go
# jobInitDir - directory were should be when job starts
# jobContainer - any commands needed to set up container
# jobCleanup - any cleanup commands to run after job

payloadCommand: >
  cd {jobInitDir};
  ls -al;
  {setupLSSTEnv}
  pwd;
  python3 \${CTRL_BPS_PANDA_DIR}/python/lsst/ctrl/bps/panda/edgenode/cmd_line_decoder.py _cmd_line_ & pJob=\$!;
  prmon -i 5
  -f ${logDir}/memory_monitor_output.txt
  -j ${logDir}/memory_monitor_summary.json
  -p \$pJob & mJob=\$!;
  wait \$pJob;
  ret=\$?;
  wait \$mJob;
  {jobCleanup}
  exit \$ret;

runnerCommand: >
  logDir={jobLogDir};
  mkdir -p ${logDir};
  chmod ugo+w ${logDir};
  file=${logDir}/memory_monitor_output.txt; touch ${file}; chmod ugo+w ${file};
  if [ ! -e memory_monitor_output.txt ]; then ln -s ${file} ./; fi;
  file=${logDir}/memory_monitor_summary.json; touch ${file}; chmod ugo+w ${file};
  if [ ! -e memory_monitor_summary.json ]; then ln -s ${file} ./; fi;
  {jobContainer}
  retStat=$?;
  exit $retStat
