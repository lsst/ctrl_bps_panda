# PANDA plugin specific settings:
placeholderParams: ['qgraphNodeId', 'qgraphId']
defaultPreCmdOpts: "--long-log --log-level=VERBOSE --log-file payload-log.json"

# Limit the number of jobs in a single PanDA task
maxJobsPerTask: 30000


pipetask:
  pipetaskInit:
    # This is different from the ctrl_bps default only in the addition of {fileDistributionEndPoint}
    runQuantumCommand: >
      ${CTRL_MPEXEC_DIR}/bin/pipetask {initPreCmdOpts} run
      -b {butlerConfig}
      -i {inCollection}
      -o {output}
      --output-run {outputRun}
      --qgraph {fileDistributionEndPoint}/{qgraphFile}
      --qgraph-id {qgraphId} --qgraph-node-id {qgraphNodeId}
      --clobber-outputs
      --init-only
      --extend-run {extraInitOptions}

# This is different from the ctrl_bps default only in the addition of {fileDistributionEndPoint}
runQuantumCommand: >
  ${CTRL_MPEXEC_DIR}/bin/pipetask {runPreCmdOpts} run
  -b {butlerConfig}
  -i {inCollection}
  -o {output}
  --output-run {outputRun}
  --qgraph {fileDistributionEndPoint}/{qgraphFile}
  --qgraph-id {qgraphId}
  --qgraph-node-id {qgraphNodeId}
  --clobber-outputs
  --skip-init-writes
  --extend-run {extraRunQuantumOptions}

# This is a series of setup commands preceding the actual core SW execution with running prmon (memory monitor)
runnerCommand: >
  logDir=/tmp/panda/${PANDAID};
  mkdir ${logDir};
  logFile=${logDir}/${REALTIME_LOGFILES};
  touch ${logFile};
  chmod ugo+w ${logFile} ${logDir}; ln -s ${logFile} ./;
  docker run
  --rm
  -v ${logDir}:${logDir}
  -v ${logFile}:/tmp/${REALTIME_LOGFILES}
  --network host
  --privileged
  --env AWS_ACCESS_KEY_ID=$(</credentials/AWS_ACCESS_KEY_ID)
  --env AWS_SECRET_ACCESS_KEY=$(</credentials/AWS_SECRET_ACCESS_KEY)
  --env PGPASSWORD=$(</credentials/PGPASSWORD)
  --env S3_ENDPOINT_URL=${S3_ENDPOINT_URL} {sw_image}
  /bin/bash -c "source /opt/lsst/software/stack/loadLSST.bash;
  cd /tmp;
  ls -al;
  setup lsst_distrib;
  pwd;
  prmon
  -i 5
  -f ${logDir}/prmon.txt
  -j ${logDir}/prmon.json
  --
  python3 \${CTRL_BPS_PANDA_DIR}/python/lsst/ctrl/bps/panda/edgenode/cmd_line_decoder.py _cmd_line_;" >&2;
  retStat=$?;
  ln -fs ${logDir}/prmon.txt ./memory_monitor_output.txt;
  ln -fs ${logDir}/prmon.json ./memory_monitor_summary.json;
  exit $retStat

wmsServiceClass: lsst.ctrl.bps.panda.PanDAService
